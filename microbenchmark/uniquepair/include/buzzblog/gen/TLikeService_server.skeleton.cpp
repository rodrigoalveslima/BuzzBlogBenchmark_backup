// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TLikeService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::gen;

class TLikeServiceHandler : virtual public TLikeServiceIf {
 public:
  TLikeServiceHandler() {
    // Your initialization goes here
  }

  void like_post(TLike& _return, const int32_t requester_id, const int32_t post_id) {
    // Your implementation goes here
    printf("like_post\n");
  }

  void retrieve_standard_like(TLike& _return, const int32_t requester_id, const int32_t like_id) {
    // Your implementation goes here
    printf("retrieve_standard_like\n");
  }

  void retrieve_expanded_like(TLike& _return, const int32_t requester_id, const int32_t like_id) {
    // Your implementation goes here
    printf("retrieve_expanded_like\n");
  }

  void delete_like(const int32_t requester_id, const int32_t like_id) {
    // Your implementation goes here
    printf("delete_like\n");
  }

  void list_likes(std::vector<TLike> & _return, const int32_t requester_id, const TLikeQuery& query, const int32_t limit, const int32_t offset) {
    // Your implementation goes here
    printf("list_likes\n");
  }

  int32_t count_likes_by_account(const int32_t requester_id, const int32_t account_id) {
    // Your implementation goes here
    printf("count_likes_by_account\n");
  }

  int32_t count_likes_of_post(const int32_t requester_id, const int32_t post_id) {
    // Your implementation goes here
    printf("count_likes_of_post\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<TLikeServiceHandler> handler(new TLikeServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new TLikeServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

