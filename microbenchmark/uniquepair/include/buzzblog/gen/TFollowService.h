/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TFollowService_H
#define TFollowService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "buzzblog_types.h"

namespace gen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TFollowServiceIf {
 public:
  virtual ~TFollowServiceIf() {}
  virtual void follow_account(TFollow& _return, const int32_t requester_id, const int32_t account_id) = 0;
  virtual void retrieve_standard_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id) = 0;
  virtual void retrieve_expanded_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id) = 0;
  virtual void delete_follow(const int32_t requester_id, const int32_t follow_id) = 0;
  virtual void list_follows(std::vector<TFollow> & _return, const int32_t requester_id, const int32_t follower_id, const int32_t followee_id) = 0;
  virtual bool check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id) = 0;
  virtual int32_t count_followers(const int32_t requester_id, const int32_t account_id) = 0;
  virtual int32_t count_followees(const int32_t requester_id, const int32_t account_id) = 0;
};

class TFollowServiceIfFactory {
 public:
  typedef TFollowServiceIf Handler;

  virtual ~TFollowServiceIfFactory() {}

  virtual TFollowServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TFollowServiceIf* /* handler */) = 0;
};

class TFollowServiceIfSingletonFactory : virtual public TFollowServiceIfFactory {
 public:
  TFollowServiceIfSingletonFactory(const ::std::shared_ptr<TFollowServiceIf>& iface) : iface_(iface) {}
  virtual ~TFollowServiceIfSingletonFactory() {}

  virtual TFollowServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TFollowServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TFollowServiceIf> iface_;
};

class TFollowServiceNull : virtual public TFollowServiceIf {
 public:
  virtual ~TFollowServiceNull() {}
  void follow_account(TFollow& /* _return */, const int32_t /* requester_id */, const int32_t /* account_id */) {
    return;
  }
  void retrieve_standard_follow(TFollow& /* _return */, const int32_t /* requester_id */, const int32_t /* follow_id */) {
    return;
  }
  void retrieve_expanded_follow(TFollow& /* _return */, const int32_t /* requester_id */, const int32_t /* follow_id */) {
    return;
  }
  void delete_follow(const int32_t /* requester_id */, const int32_t /* follow_id */) {
    return;
  }
  void list_follows(std::vector<TFollow> & /* _return */, const int32_t /* requester_id */, const int32_t /* follower_id */, const int32_t /* followee_id */) {
    return;
  }
  bool check_follow(const int32_t /* requester_id */, const int32_t /* follower_id */, const int32_t /* followee_id */) {
    bool _return = false;
    return _return;
  }
  int32_t count_followers(const int32_t /* requester_id */, const int32_t /* account_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t count_followees(const int32_t /* requester_id */, const int32_t /* account_id */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TFollowService_follow_account_args__isset {
  _TFollowService_follow_account_args__isset() : requester_id(false), account_id(false) {}
  bool requester_id :1;
  bool account_id :1;
} _TFollowService_follow_account_args__isset;

class TFollowService_follow_account_args {
 public:

  TFollowService_follow_account_args(const TFollowService_follow_account_args&);
  TFollowService_follow_account_args& operator=(const TFollowService_follow_account_args&);
  TFollowService_follow_account_args() : requester_id(0), account_id(0) {
  }

  virtual ~TFollowService_follow_account_args() noexcept;
  int32_t requester_id;
  int32_t account_id;

  _TFollowService_follow_account_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_account_id(const int32_t val);

  bool operator == (const TFollowService_follow_account_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(account_id == rhs.account_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_follow_account_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_follow_account_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_follow_account_pargs {
 public:


  virtual ~TFollowService_follow_account_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* account_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_follow_account_result__isset {
  _TFollowService_follow_account_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_follow_account_result__isset;

class TFollowService_follow_account_result {
 public:

  TFollowService_follow_account_result(const TFollowService_follow_account_result&);
  TFollowService_follow_account_result& operator=(const TFollowService_follow_account_result&);
  TFollowService_follow_account_result() {
  }

  virtual ~TFollowService_follow_account_result() noexcept;
  TFollow success;
  TFollowAlreadyExistsException e;

  _TFollowService_follow_account_result__isset __isset;

  void __set_success(const TFollow& val);

  void __set_e(const TFollowAlreadyExistsException& val);

  bool operator == (const TFollowService_follow_account_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TFollowService_follow_account_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_follow_account_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_follow_account_presult__isset {
  _TFollowService_follow_account_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_follow_account_presult__isset;

class TFollowService_follow_account_presult {
 public:


  virtual ~TFollowService_follow_account_presult() noexcept;
  TFollow* success;
  TFollowAlreadyExistsException e;

  _TFollowService_follow_account_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_retrieve_standard_follow_args__isset {
  _TFollowService_retrieve_standard_follow_args__isset() : requester_id(false), follow_id(false) {}
  bool requester_id :1;
  bool follow_id :1;
} _TFollowService_retrieve_standard_follow_args__isset;

class TFollowService_retrieve_standard_follow_args {
 public:

  TFollowService_retrieve_standard_follow_args(const TFollowService_retrieve_standard_follow_args&);
  TFollowService_retrieve_standard_follow_args& operator=(const TFollowService_retrieve_standard_follow_args&);
  TFollowService_retrieve_standard_follow_args() : requester_id(0), follow_id(0) {
  }

  virtual ~TFollowService_retrieve_standard_follow_args() noexcept;
  int32_t requester_id;
  int32_t follow_id;

  _TFollowService_retrieve_standard_follow_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_follow_id(const int32_t val);

  bool operator == (const TFollowService_retrieve_standard_follow_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(follow_id == rhs.follow_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_retrieve_standard_follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_retrieve_standard_follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_retrieve_standard_follow_pargs {
 public:


  virtual ~TFollowService_retrieve_standard_follow_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* follow_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_retrieve_standard_follow_result__isset {
  _TFollowService_retrieve_standard_follow_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_retrieve_standard_follow_result__isset;

class TFollowService_retrieve_standard_follow_result {
 public:

  TFollowService_retrieve_standard_follow_result(const TFollowService_retrieve_standard_follow_result&);
  TFollowService_retrieve_standard_follow_result& operator=(const TFollowService_retrieve_standard_follow_result&);
  TFollowService_retrieve_standard_follow_result() {
  }

  virtual ~TFollowService_retrieve_standard_follow_result() noexcept;
  TFollow success;
  TFollowNotFoundException e;

  _TFollowService_retrieve_standard_follow_result__isset __isset;

  void __set_success(const TFollow& val);

  void __set_e(const TFollowNotFoundException& val);

  bool operator == (const TFollowService_retrieve_standard_follow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TFollowService_retrieve_standard_follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_retrieve_standard_follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_retrieve_standard_follow_presult__isset {
  _TFollowService_retrieve_standard_follow_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_retrieve_standard_follow_presult__isset;

class TFollowService_retrieve_standard_follow_presult {
 public:


  virtual ~TFollowService_retrieve_standard_follow_presult() noexcept;
  TFollow* success;
  TFollowNotFoundException e;

  _TFollowService_retrieve_standard_follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_retrieve_expanded_follow_args__isset {
  _TFollowService_retrieve_expanded_follow_args__isset() : requester_id(false), follow_id(false) {}
  bool requester_id :1;
  bool follow_id :1;
} _TFollowService_retrieve_expanded_follow_args__isset;

class TFollowService_retrieve_expanded_follow_args {
 public:

  TFollowService_retrieve_expanded_follow_args(const TFollowService_retrieve_expanded_follow_args&);
  TFollowService_retrieve_expanded_follow_args& operator=(const TFollowService_retrieve_expanded_follow_args&);
  TFollowService_retrieve_expanded_follow_args() : requester_id(0), follow_id(0) {
  }

  virtual ~TFollowService_retrieve_expanded_follow_args() noexcept;
  int32_t requester_id;
  int32_t follow_id;

  _TFollowService_retrieve_expanded_follow_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_follow_id(const int32_t val);

  bool operator == (const TFollowService_retrieve_expanded_follow_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(follow_id == rhs.follow_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_retrieve_expanded_follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_retrieve_expanded_follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_retrieve_expanded_follow_pargs {
 public:


  virtual ~TFollowService_retrieve_expanded_follow_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* follow_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_retrieve_expanded_follow_result__isset {
  _TFollowService_retrieve_expanded_follow_result__isset() : success(false), e1(false), e2(false) {}
  bool success :1;
  bool e1 :1;
  bool e2 :1;
} _TFollowService_retrieve_expanded_follow_result__isset;

class TFollowService_retrieve_expanded_follow_result {
 public:

  TFollowService_retrieve_expanded_follow_result(const TFollowService_retrieve_expanded_follow_result&);
  TFollowService_retrieve_expanded_follow_result& operator=(const TFollowService_retrieve_expanded_follow_result&);
  TFollowService_retrieve_expanded_follow_result() {
  }

  virtual ~TFollowService_retrieve_expanded_follow_result() noexcept;
  TFollow success;
  TFollowNotFoundException e1;
  TAccountNotFoundException e2;

  _TFollowService_retrieve_expanded_follow_result__isset __isset;

  void __set_success(const TFollow& val);

  void __set_e1(const TFollowNotFoundException& val);

  void __set_e2(const TAccountNotFoundException& val);

  bool operator == (const TFollowService_retrieve_expanded_follow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e1 == rhs.e1))
      return false;
    if (!(e2 == rhs.e2))
      return false;
    return true;
  }
  bool operator != (const TFollowService_retrieve_expanded_follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_retrieve_expanded_follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_retrieve_expanded_follow_presult__isset {
  _TFollowService_retrieve_expanded_follow_presult__isset() : success(false), e1(false), e2(false) {}
  bool success :1;
  bool e1 :1;
  bool e2 :1;
} _TFollowService_retrieve_expanded_follow_presult__isset;

class TFollowService_retrieve_expanded_follow_presult {
 public:


  virtual ~TFollowService_retrieve_expanded_follow_presult() noexcept;
  TFollow* success;
  TFollowNotFoundException e1;
  TAccountNotFoundException e2;

  _TFollowService_retrieve_expanded_follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_delete_follow_args__isset {
  _TFollowService_delete_follow_args__isset() : requester_id(false), follow_id(false) {}
  bool requester_id :1;
  bool follow_id :1;
} _TFollowService_delete_follow_args__isset;

class TFollowService_delete_follow_args {
 public:

  TFollowService_delete_follow_args(const TFollowService_delete_follow_args&);
  TFollowService_delete_follow_args& operator=(const TFollowService_delete_follow_args&);
  TFollowService_delete_follow_args() : requester_id(0), follow_id(0) {
  }

  virtual ~TFollowService_delete_follow_args() noexcept;
  int32_t requester_id;
  int32_t follow_id;

  _TFollowService_delete_follow_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_follow_id(const int32_t val);

  bool operator == (const TFollowService_delete_follow_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(follow_id == rhs.follow_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_delete_follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_delete_follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_delete_follow_pargs {
 public:


  virtual ~TFollowService_delete_follow_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* follow_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_delete_follow_result__isset {
  _TFollowService_delete_follow_result__isset() : e1(false), e2(false) {}
  bool e1 :1;
  bool e2 :1;
} _TFollowService_delete_follow_result__isset;

class TFollowService_delete_follow_result {
 public:

  TFollowService_delete_follow_result(const TFollowService_delete_follow_result&);
  TFollowService_delete_follow_result& operator=(const TFollowService_delete_follow_result&);
  TFollowService_delete_follow_result() {
  }

  virtual ~TFollowService_delete_follow_result() noexcept;
  TFollowNotFoundException e1;
  TFollowNotAuthorizedException e2;

  _TFollowService_delete_follow_result__isset __isset;

  void __set_e1(const TFollowNotFoundException& val);

  void __set_e2(const TFollowNotAuthorizedException& val);

  bool operator == (const TFollowService_delete_follow_result & rhs) const
  {
    if (!(e1 == rhs.e1))
      return false;
    if (!(e2 == rhs.e2))
      return false;
    return true;
  }
  bool operator != (const TFollowService_delete_follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_delete_follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_delete_follow_presult__isset {
  _TFollowService_delete_follow_presult__isset() : e1(false), e2(false) {}
  bool e1 :1;
  bool e2 :1;
} _TFollowService_delete_follow_presult__isset;

class TFollowService_delete_follow_presult {
 public:


  virtual ~TFollowService_delete_follow_presult() noexcept;
  TFollowNotFoundException e1;
  TFollowNotAuthorizedException e2;

  _TFollowService_delete_follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_list_follows_args__isset {
  _TFollowService_list_follows_args__isset() : requester_id(false), follower_id(false), followee_id(false) {}
  bool requester_id :1;
  bool follower_id :1;
  bool followee_id :1;
} _TFollowService_list_follows_args__isset;

class TFollowService_list_follows_args {
 public:

  TFollowService_list_follows_args(const TFollowService_list_follows_args&);
  TFollowService_list_follows_args& operator=(const TFollowService_list_follows_args&);
  TFollowService_list_follows_args() : requester_id(0), follower_id(0), followee_id(0) {
  }

  virtual ~TFollowService_list_follows_args() noexcept;
  int32_t requester_id;
  int32_t follower_id;
  int32_t followee_id;

  _TFollowService_list_follows_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_follower_id(const int32_t val);

  void __set_followee_id(const int32_t val);

  bool operator == (const TFollowService_list_follows_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(follower_id == rhs.follower_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_list_follows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_list_follows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_list_follows_pargs {
 public:


  virtual ~TFollowService_list_follows_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* follower_id;
  const int32_t* followee_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_list_follows_result__isset {
  _TFollowService_list_follows_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_list_follows_result__isset;

class TFollowService_list_follows_result {
 public:

  TFollowService_list_follows_result(const TFollowService_list_follows_result&);
  TFollowService_list_follows_result& operator=(const TFollowService_list_follows_result&);
  TFollowService_list_follows_result() {
  }

  virtual ~TFollowService_list_follows_result() noexcept;
  std::vector<TFollow>  success;
  TAccountNotFoundException e;

  _TFollowService_list_follows_result__isset __isset;

  void __set_success(const std::vector<TFollow> & val);

  void __set_e(const TAccountNotFoundException& val);

  bool operator == (const TFollowService_list_follows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TFollowService_list_follows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_list_follows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_list_follows_presult__isset {
  _TFollowService_list_follows_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TFollowService_list_follows_presult__isset;

class TFollowService_list_follows_presult {
 public:


  virtual ~TFollowService_list_follows_presult() noexcept;
  std::vector<TFollow> * success;
  TAccountNotFoundException e;

  _TFollowService_list_follows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_check_follow_args__isset {
  _TFollowService_check_follow_args__isset() : requester_id(false), follower_id(false), followee_id(false) {}
  bool requester_id :1;
  bool follower_id :1;
  bool followee_id :1;
} _TFollowService_check_follow_args__isset;

class TFollowService_check_follow_args {
 public:

  TFollowService_check_follow_args(const TFollowService_check_follow_args&);
  TFollowService_check_follow_args& operator=(const TFollowService_check_follow_args&);
  TFollowService_check_follow_args() : requester_id(0), follower_id(0), followee_id(0) {
  }

  virtual ~TFollowService_check_follow_args() noexcept;
  int32_t requester_id;
  int32_t follower_id;
  int32_t followee_id;

  _TFollowService_check_follow_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_follower_id(const int32_t val);

  void __set_followee_id(const int32_t val);

  bool operator == (const TFollowService_check_follow_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(follower_id == rhs.follower_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_check_follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_check_follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_check_follow_pargs {
 public:


  virtual ~TFollowService_check_follow_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* follower_id;
  const int32_t* followee_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_check_follow_result__isset {
  _TFollowService_check_follow_result__isset() : success(false) {}
  bool success :1;
} _TFollowService_check_follow_result__isset;

class TFollowService_check_follow_result {
 public:

  TFollowService_check_follow_result(const TFollowService_check_follow_result&);
  TFollowService_check_follow_result& operator=(const TFollowService_check_follow_result&);
  TFollowService_check_follow_result() : success(0) {
  }

  virtual ~TFollowService_check_follow_result() noexcept;
  bool success;

  _TFollowService_check_follow_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TFollowService_check_follow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TFollowService_check_follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_check_follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_check_follow_presult__isset {
  _TFollowService_check_follow_presult__isset() : success(false) {}
  bool success :1;
} _TFollowService_check_follow_presult__isset;

class TFollowService_check_follow_presult {
 public:


  virtual ~TFollowService_check_follow_presult() noexcept;
  bool* success;

  _TFollowService_check_follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_count_followers_args__isset {
  _TFollowService_count_followers_args__isset() : requester_id(false), account_id(false) {}
  bool requester_id :1;
  bool account_id :1;
} _TFollowService_count_followers_args__isset;

class TFollowService_count_followers_args {
 public:

  TFollowService_count_followers_args(const TFollowService_count_followers_args&);
  TFollowService_count_followers_args& operator=(const TFollowService_count_followers_args&);
  TFollowService_count_followers_args() : requester_id(0), account_id(0) {
  }

  virtual ~TFollowService_count_followers_args() noexcept;
  int32_t requester_id;
  int32_t account_id;

  _TFollowService_count_followers_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_account_id(const int32_t val);

  bool operator == (const TFollowService_count_followers_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(account_id == rhs.account_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_count_followers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_count_followers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_count_followers_pargs {
 public:


  virtual ~TFollowService_count_followers_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* account_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_count_followers_result__isset {
  _TFollowService_count_followers_result__isset() : success(false) {}
  bool success :1;
} _TFollowService_count_followers_result__isset;

class TFollowService_count_followers_result {
 public:

  TFollowService_count_followers_result(const TFollowService_count_followers_result&);
  TFollowService_count_followers_result& operator=(const TFollowService_count_followers_result&);
  TFollowService_count_followers_result() : success(0) {
  }

  virtual ~TFollowService_count_followers_result() noexcept;
  int32_t success;

  _TFollowService_count_followers_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TFollowService_count_followers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TFollowService_count_followers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_count_followers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_count_followers_presult__isset {
  _TFollowService_count_followers_presult__isset() : success(false) {}
  bool success :1;
} _TFollowService_count_followers_presult__isset;

class TFollowService_count_followers_presult {
 public:


  virtual ~TFollowService_count_followers_presult() noexcept;
  int32_t* success;

  _TFollowService_count_followers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFollowService_count_followees_args__isset {
  _TFollowService_count_followees_args__isset() : requester_id(false), account_id(false) {}
  bool requester_id :1;
  bool account_id :1;
} _TFollowService_count_followees_args__isset;

class TFollowService_count_followees_args {
 public:

  TFollowService_count_followees_args(const TFollowService_count_followees_args&);
  TFollowService_count_followees_args& operator=(const TFollowService_count_followees_args&);
  TFollowService_count_followees_args() : requester_id(0), account_id(0) {
  }

  virtual ~TFollowService_count_followees_args() noexcept;
  int32_t requester_id;
  int32_t account_id;

  _TFollowService_count_followees_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_account_id(const int32_t val);

  bool operator == (const TFollowService_count_followees_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(account_id == rhs.account_id))
      return false;
    return true;
  }
  bool operator != (const TFollowService_count_followees_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_count_followees_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFollowService_count_followees_pargs {
 public:


  virtual ~TFollowService_count_followees_pargs() noexcept;
  const int32_t* requester_id;
  const int32_t* account_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_count_followees_result__isset {
  _TFollowService_count_followees_result__isset() : success(false) {}
  bool success :1;
} _TFollowService_count_followees_result__isset;

class TFollowService_count_followees_result {
 public:

  TFollowService_count_followees_result(const TFollowService_count_followees_result&);
  TFollowService_count_followees_result& operator=(const TFollowService_count_followees_result&);
  TFollowService_count_followees_result() : success(0) {
  }

  virtual ~TFollowService_count_followees_result() noexcept;
  int32_t success;

  _TFollowService_count_followees_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TFollowService_count_followees_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TFollowService_count_followees_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFollowService_count_followees_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TFollowService_count_followees_presult__isset {
  _TFollowService_count_followees_presult__isset() : success(false) {}
  bool success :1;
} _TFollowService_count_followees_presult__isset;

class TFollowService_count_followees_presult {
 public:


  virtual ~TFollowService_count_followees_presult() noexcept;
  int32_t* success;

  _TFollowService_count_followees_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TFollowServiceClient : virtual public TFollowServiceIf {
 public:
  TFollowServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TFollowServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void follow_account(TFollow& _return, const int32_t requester_id, const int32_t account_id);
  void send_follow_account(const int32_t requester_id, const int32_t account_id);
  void recv_follow_account(TFollow& _return);
  void retrieve_standard_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id);
  void send_retrieve_standard_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_retrieve_standard_follow(TFollow& _return);
  void retrieve_expanded_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id);
  void send_retrieve_expanded_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_retrieve_expanded_follow(TFollow& _return);
  void delete_follow(const int32_t requester_id, const int32_t follow_id);
  void send_delete_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_delete_follow();
  void list_follows(std::vector<TFollow> & _return, const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  void send_list_follows(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  void recv_list_follows(std::vector<TFollow> & _return);
  bool check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  void send_check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  bool recv_check_follow();
  int32_t count_followers(const int32_t requester_id, const int32_t account_id);
  void send_count_followers(const int32_t requester_id, const int32_t account_id);
  int32_t recv_count_followers();
  int32_t count_followees(const int32_t requester_id, const int32_t account_id);
  void send_count_followees(const int32_t requester_id, const int32_t account_id);
  int32_t recv_count_followees();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TFollowServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TFollowServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TFollowServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_follow_account(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieve_standard_follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieve_expanded_follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_follows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count_followers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count_followees(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TFollowServiceProcessor(::std::shared_ptr<TFollowServiceIf> iface) :
    iface_(iface) {
    processMap_["follow_account"] = &TFollowServiceProcessor::process_follow_account;
    processMap_["retrieve_standard_follow"] = &TFollowServiceProcessor::process_retrieve_standard_follow;
    processMap_["retrieve_expanded_follow"] = &TFollowServiceProcessor::process_retrieve_expanded_follow;
    processMap_["delete_follow"] = &TFollowServiceProcessor::process_delete_follow;
    processMap_["list_follows"] = &TFollowServiceProcessor::process_list_follows;
    processMap_["check_follow"] = &TFollowServiceProcessor::process_check_follow;
    processMap_["count_followers"] = &TFollowServiceProcessor::process_count_followers;
    processMap_["count_followees"] = &TFollowServiceProcessor::process_count_followees;
  }

  virtual ~TFollowServiceProcessor() {}
};

class TFollowServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TFollowServiceProcessorFactory(const ::std::shared_ptr< TFollowServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TFollowServiceIfFactory > handlerFactory_;
};

class TFollowServiceMultiface : virtual public TFollowServiceIf {
 public:
  TFollowServiceMultiface(std::vector<std::shared_ptr<TFollowServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TFollowServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TFollowServiceIf> > ifaces_;
  TFollowServiceMultiface() {}
  void add(::std::shared_ptr<TFollowServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void follow_account(TFollow& _return, const int32_t requester_id, const int32_t account_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->follow_account(_return, requester_id, account_id);
    }
    ifaces_[i]->follow_account(_return, requester_id, account_id);
    return;
  }

  void retrieve_standard_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieve_standard_follow(_return, requester_id, follow_id);
    }
    ifaces_[i]->retrieve_standard_follow(_return, requester_id, follow_id);
    return;
  }

  void retrieve_expanded_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieve_expanded_follow(_return, requester_id, follow_id);
    }
    ifaces_[i]->retrieve_expanded_follow(_return, requester_id, follow_id);
    return;
  }

  void delete_follow(const int32_t requester_id, const int32_t follow_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_follow(requester_id, follow_id);
    }
    ifaces_[i]->delete_follow(requester_id, follow_id);
  }

  void list_follows(std::vector<TFollow> & _return, const int32_t requester_id, const int32_t follower_id, const int32_t followee_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_follows(_return, requester_id, follower_id, followee_id);
    }
    ifaces_[i]->list_follows(_return, requester_id, follower_id, followee_id);
    return;
  }

  bool check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_follow(requester_id, follower_id, followee_id);
    }
    return ifaces_[i]->check_follow(requester_id, follower_id, followee_id);
  }

  int32_t count_followers(const int32_t requester_id, const int32_t account_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count_followers(requester_id, account_id);
    }
    return ifaces_[i]->count_followers(requester_id, account_id);
  }

  int32_t count_followees(const int32_t requester_id, const int32_t account_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count_followees(requester_id, account_id);
    }
    return ifaces_[i]->count_followees(requester_id, account_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TFollowServiceConcurrentClient : virtual public TFollowServiceIf {
 public:
  TFollowServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TFollowServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void follow_account(TFollow& _return, const int32_t requester_id, const int32_t account_id);
  int32_t send_follow_account(const int32_t requester_id, const int32_t account_id);
  void recv_follow_account(TFollow& _return, const int32_t seqid);
  void retrieve_standard_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id);
  int32_t send_retrieve_standard_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_retrieve_standard_follow(TFollow& _return, const int32_t seqid);
  void retrieve_expanded_follow(TFollow& _return, const int32_t requester_id, const int32_t follow_id);
  int32_t send_retrieve_expanded_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_retrieve_expanded_follow(TFollow& _return, const int32_t seqid);
  void delete_follow(const int32_t requester_id, const int32_t follow_id);
  int32_t send_delete_follow(const int32_t requester_id, const int32_t follow_id);
  void recv_delete_follow(const int32_t seqid);
  void list_follows(std::vector<TFollow> & _return, const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  int32_t send_list_follows(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  void recv_list_follows(std::vector<TFollow> & _return, const int32_t seqid);
  bool check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  int32_t send_check_follow(const int32_t requester_id, const int32_t follower_id, const int32_t followee_id);
  bool recv_check_follow(const int32_t seqid);
  int32_t count_followers(const int32_t requester_id, const int32_t account_id);
  int32_t send_count_followers(const int32_t requester_id, const int32_t account_id);
  int32_t recv_count_followers(const int32_t seqid);
  int32_t count_followees(const int32_t requester_id, const int32_t account_id);
  int32_t send_count_followees(const int32_t requester_id, const int32_t account_id);
  int32_t recv_count_followees(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
