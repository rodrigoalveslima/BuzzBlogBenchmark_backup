// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TAccountService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::gen;

class TAccountServiceHandler : virtual public TAccountServiceIf {
 public:
  TAccountServiceHandler() {
    // Your initialization goes here
  }

  void authenticate_user(TAccount& _return, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("authenticate_user\n");
  }

  void create_account(TAccount& _return, const std::string& username, const std::string& password, const std::string& first_name, const std::string& last_name) {
    // Your implementation goes here
    printf("create_account\n");
  }

  void retrieve_standard_account(TAccount& _return, const int32_t requester_id, const int32_t account_id) {
    // Your implementation goes here
    printf("retrieve_standard_account\n");
  }

  void retrieve_expanded_account(TAccount& _return, const int32_t requester_id, const int32_t account_id) {
    // Your implementation goes here
    printf("retrieve_expanded_account\n");
  }

  void update_account(TAccount& _return, const int32_t requester_id, const int32_t account_id, const std::string& password, const std::string& first_name, const std::string& last_name) {
    // Your implementation goes here
    printf("update_account\n");
  }

  void delete_account(const int32_t requester_id, const int32_t account_id) {
    // Your implementation goes here
    printf("delete_account\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<TAccountServiceHandler> handler(new TAccountServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new TAccountServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

